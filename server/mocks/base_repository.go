// Code generated by MockGen. DO NOT EDIT.
// Source: base_repository.go
//
// Generated by this command:
//
//	mockgen -source=base_repository.go -destination=../../mocks/base_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBaseRepository is a mock of BaseRepository interface.
type MockBaseRepository[T any, K any] struct {
	ctrl     *gomock.Controller
	recorder *MockBaseRepositoryMockRecorder[T, K]
	isgomock struct{}
}

// MockBaseRepositoryMockRecorder is the mock recorder for MockBaseRepository.
type MockBaseRepositoryMockRecorder[T any, K any] struct {
	mock *MockBaseRepository[T, K]
}

// NewMockBaseRepository creates a new mock instance.
func NewMockBaseRepository[T any, K any](ctrl *gomock.Controller) *MockBaseRepository[T, K] {
	mock := &MockBaseRepository[T, K]{ctrl: ctrl}
	mock.recorder = &MockBaseRepositoryMockRecorder[T, K]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseRepository[T, K]) EXPECT() *MockBaseRepositoryMockRecorder[T, K] {
	return m.recorder
}

// Create mocks base method.
func (m *MockBaseRepository[T, K]) Create(ctx context.Context, entity *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBaseRepositoryMockRecorder[T, K]) Create(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBaseRepository[T, K])(nil).Create), ctx, entity)
}

// Delete mocks base method.
func (m *MockBaseRepository[T, K]) Delete(ctx context.Context, id K) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBaseRepositoryMockRecorder[T, K]) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBaseRepository[T, K])(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockBaseRepository[T, K]) Find(ctx context.Context, id K) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockBaseRepositoryMockRecorder[T, K]) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBaseRepository[T, K])(nil).Find), ctx, id)
}

// Update mocks base method.
func (m *MockBaseRepository[T, K]) Update(ctx context.Context, entity *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBaseRepositoryMockRecorder[T, K]) Update(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBaseRepository[T, K])(nil).Update), ctx, entity)
}
