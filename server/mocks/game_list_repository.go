// Code generated by MockGen. DO NOT EDIT.
// Source: game_list.go
//
// Generated by this command:
//
//	mockgen -source=game_list.go -destination=../../mocks/game_list_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Bromolima/my-game-list/internal/entities"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockGameListRepository is a mock of GameListRepository interface.
type MockGameListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameListRepositoryMockRecorder
	isgomock struct{}
}

// MockGameListRepositoryMockRecorder is the mock recorder for MockGameListRepository.
type MockGameListRepositoryMockRecorder struct {
	mock *MockGameListRepository
}

// NewMockGameListRepository creates a new mock instance.
func NewMockGameListRepository(ctrl *gomock.Controller) *MockGameListRepository {
	mock := &MockGameListRepository{ctrl: ctrl}
	mock.recorder = &MockGameListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameListRepository) EXPECT() *MockGameListRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGameListRepository) Create(ctx context.Context, entity *entities.GameList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGameListRepositoryMockRecorder) Create(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGameListRepository)(nil).Create), ctx, entity)
}

// Delete mocks base method.
func (m *MockGameListRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGameListRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGameListRepository)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockGameListRepository) Find(ctx context.Context, id uuid.UUID) (*entities.GameList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*entities.GameList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGameListRepositoryMockRecorder) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGameListRepository)(nil).Find), ctx, id)
}

// FindGamesByListID mocks base method.
func (m *MockGameListRepository) FindGamesByListID(ctx context.Context, listID uuid.UUID) ([]*entities.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGamesByListID", ctx, listID)
	ret0, _ := ret[0].([]*entities.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGamesByListID indicates an expected call of FindGamesByListID.
func (mr *MockGameListRepositoryMockRecorder) FindGamesByListID(ctx, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGamesByListID", reflect.TypeOf((*MockGameListRepository)(nil).FindGamesByListID), ctx, listID)
}

// Update mocks base method.
func (m *MockGameListRepository) Update(ctx context.Context, entity *entities.GameList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGameListRepositoryMockRecorder) Update(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGameListRepository)(nil).Update), ctx, entity)
}
