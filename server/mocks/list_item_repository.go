// Code generated by MockGen. DO NOT EDIT.
// Source: list_item.go
//
// Generated by this command:
//
//	mockgen -source=list_item.go -destination=../../mocks/list_item_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Bromolima/my-game-list/internal/entities"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockListItemRepository is a mock of ListItemRepository interface.
type MockListItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockListItemRepositoryMockRecorder
	isgomock struct{}
}

// MockListItemRepositoryMockRecorder is the mock recorder for MockListItemRepository.
type MockListItemRepositoryMockRecorder struct {
	mock *MockListItemRepository
}

// NewMockListItemRepository creates a new mock instance.
func NewMockListItemRepository(ctrl *gomock.Controller) *MockListItemRepository {
	mock := &MockListItemRepository{ctrl: ctrl}
	mock.recorder = &MockListItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListItemRepository) EXPECT() *MockListItemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockListItemRepository) Create(ctx context.Context, listItem *entities.ListItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, listItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockListItemRepositoryMockRecorder) Create(ctx, listItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockListItemRepository)(nil).Create), ctx, listItem)
}

// Delete mocks base method.
func (m *MockListItemRepository) Delete(ctx context.Context, gameID, gameListID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, gameID, gameListID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockListItemRepositoryMockRecorder) Delete(ctx, gameID, gameListID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockListItemRepository)(nil).Delete), ctx, gameID, gameListID)
}

// Find mocks base method.
func (m *MockListItemRepository) Find(ctx context.Context, gameID, gameListID uuid.UUID) (*entities.ListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, gameID, gameListID)
	ret0, _ := ret[0].(*entities.ListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockListItemRepositoryMockRecorder) Find(ctx, gameID, gameListID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockListItemRepository)(nil).Find), ctx, gameID, gameListID)
}

// Update mocks base method.
func (m *MockListItemRepository) Update(ctx context.Context, gameID, gameListID uuid.UUID, rating float32, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, gameID, gameListID, rating, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockListItemRepositoryMockRecorder) Update(ctx, gameID, gameListID, rating, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockListItemRepository)(nil).Update), ctx, gameID, gameListID, rating, status)
}
